

import React, { useState } from "react";
import {
  timeFrame,
  setSelectedRegion,
  setSelectedAffluence,
  setSelectedAgeGroup,
  setSelectedGender,
} from "@/lib/store/features/leftPanelSlice/leftPanelDataSlice";
import {
  setSelectedAgeGroupPercentage,
  setGenderPercentage,
  setAffluencePercentage,
} from "@/lib/store/features/leftPanelSlice/leftPanelPercentageSlice";

import { useAppDispatch, useAppSelector } from "@/lib/store/hooks";

import Slider from "./Slider";
import CustomDropdown from "./Dropdown";
import { useMap } from "react-map-gl";

const LeftCard = () => {
  const dispatch = useAppDispatch();
  const { myMapA } = useMap();
  const {
    timeState,
    selectedRegion,
    selectedAffluence,
    selectedAgeGroup,
    selectedGender,
  } = useAppSelector((state) => state.leftPanel);

  const { selectedAgeGroupPercentage, genderPercentage, affluencePercentage } =
    useAppSelector((state) => state.leftPanelPercentage);

  // Individual state for each slider
  const [ageGroupSliderValue, setAgeGroupSliderValue] = useState(0);
  const [genderSliderValue, setGenderSliderValue] = useState(0);
  const [affluenceSliderValue, setAffluenceSliderValue] = useState(0);

  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);

  const handleDropdownChange =
    (
      action: any,
      dropdownLabel: string,
      sliderAction?: any,
      setSliderValue?: any
    ) =>
    (event: any) => {
      const value = event;
      dispatch(action(value));
      setActiveDropdown(dropdownLabel);
      if (sliderAction && setSliderValue) {
        const percentage = getPercentageForDropdown(dropdownLabel, value);
        setSliderValue(percentage);
        dispatch(sliderAction(percentage));
      }
    };

  const handleSliderChange =
    (setSliderValue: any, action: any) => (value: number) => {
      setSliderValue(value);
      dispatch(action(value));
    };

  const getPercentageForDropdown = (dropdownLabel: string, value: string) => {
    switch (dropdownLabel) {
      case "Age Group":
        return selectedAgeGroupPercentage;
      case "Select Gender":
        return genderPercentage;
      case "Affluence":
        return affluencePercentage;
      default:
        return 0;
    }
  };

  const dropdownData = [
    {
      label: "Time Based Filtration",
      options: [{ value: "Day" }, { value: "Night" }],
      value: timeState,
      onChange: handleDropdownChange(timeFrame, "Time Based Filtration"),
    },
    {
      label: "Select Region",
      options: [
        { value: "North" },
        { value: "South" },
        { value: "East" },
        { value: "West" },
      ],
      value: selectedRegion,
      onChange: handleDropdownChange(setSelectedRegion, "Select Region"),
      disabled: !timeState,
    },
    {
      label: "Affluence",
      options: [
        {
          value: "Ultra High",
          percentage:
            selectedAffluence === "Ultra High"
              ? affluencePercentage
              : undefined,
        },
        {
          value: "High",
          percentage:
            selectedAffluence === "High" ? affluencePercentage : undefined,
        },
        {
          value: "Medium",
          percentage:
            selectedAffluence === "Medium" ? affluencePercentage : undefined,
        },
        {
          value: "Low",
          percentage:
            selectedAffluence === "Low" ? affluencePercentage : undefined,
        },
      ],
      value: selectedAffluence,
      onChange: handleDropdownChange(
        setSelectedAffluence,
        "Affluence",
        setAffluencePercentage,
        setAffluenceSliderValue
      ),
      disabled: !timeState,
    },
    {
      label: "Select Gender",
      options: [
        {
          value: "Male",
          percentage: selectedGender === "Male" ? genderPercentage : undefined,
        },
        {
          value: "Female",
          percentage:
            selectedGender === "Female" ? genderPercentage : undefined,
        },
      ],
      value: selectedGender,
      onChange: handleDropdownChange(
        setSelectedGender,
        "Select Gender",
        setGenderPercentage,
        setGenderSliderValue
      ),
      disabled: !timeState,
    },
    {
      label: "Age Group",
      options: [
        {
          value: "18-24",
          percentage:
            selectedAgeGroup === "18-24"
              ? selectedAgeGroupPercentage
              : undefined,
        },
        {
          value: "25-34",
          percentage:
            selectedAgeGroup === "25-34"
              ? selectedAgeGroupPercentage
              : undefined,
        },
        {
          value: "35-49",
          percentage:
            selectedAgeGroup === "35-49"
              ? selectedAgeGroupPercentage
              : undefined,
        },
        {
          value: "50+",
          percentage:
            selectedAgeGroup === "50+" ? selectedAgeGroupPercentage : undefined,
        },
      ],
      value: selectedAgeGroup,
      onChange: handleDropdownChange(
        setSelectedAgeGroup,
        "Age Group",
        setSelectedAgeGroupPercentage,
        setAgeGroupSliderValue
      ),
      disabled: !timeState,
    },
  ];

  return (
    <div className="bg-white w-full flex flex-col md:w-1/2 lg:w-1/3 px-4 py-8 rounded-[20px] shadow-md">
      {dropdownData.map((dropdown, index) => (
        <CustomDropdown
          key={index}
          label={dropdown.label}
          options={dropdown.options}
          value={dropdown.value}
          onChange={dropdown.onChange}
          disabled={dropdown.disabled}
        />
      ))}
      {activeDropdown === "Age Group" && selectedAgeGroup && (
        <Slider
          label={`Percentage of ${selectedAgeGroup} group is ${selectedAgeGroupPercentage} %`}
          value={ageGroupSliderValue}
          onChange={handleSliderChange(
            setAgeGroupSliderValue,
            setSelectedAgeGroupPercentage
          )}
          disabled={!timeState}
        />
      )}
      {activeDropdown === "Select Gender" && selectedGender && (
        <Slider
          label={`Percentage of ${selectedGender} is ${genderPercentage} %`}
          value={genderSliderValue}
          onChange={handleSliderChange(
            setGenderSliderValue,
            setGenderPercentage
          )}
          disabled={!timeState}
        />
      )}
      {activeDropdown === "Affluence" && selectedAffluence && (
        <Slider
          label={`Percentage of ${selectedAffluence} is ${affluencePercentage} %`}
          value={affluenceSliderValue}
          onChange={handleSliderChange(
            setAffluenceSliderValue,
            setAffluencePercentage
          )}
          disabled={!timeState}
        />
      )}
    </div>
  );
};

export default LeftCard;


// CustomDropdown 

import React, { useState } from "react";
import { ChevronDown } from "lucide-react";
import { TiTick } from "react-icons/ti";

interface Option {
  value: string;
  percentage?: number;
}

interface DropdownProps {
  label: string;
  options: Option[];
  value: string;
  onChange: (value: string) => void;
  disabled?: boolean;
}

const CustomDropdown: React.FC<DropdownProps> = ({
  label,
  options,
  value,
  onChange,
  disabled = false,
}) => {
  const [isOpen, setIsOpen] = useState(false);

  const handleOptionClick = (optionValue: string) => {
    onChange(optionValue);
    setIsOpen(false);
  };
  const handleOpenPanel = (e: any) => {
    // console.log("ðŸš€ ~ handleOpenPanel ~ e:", e.target);
    !disabled && setIsOpen(!isOpen);
  };

  return (
    <div className={`mb-4 relative `}>
      {!disabled && (
        <label
          className={`text-sm mb-1 block absolute top-[-11px] left-8 bg-white font-extralight`}
        >
          {label}
        </label>
      )}
      <div
        className={`w-full border border-gray-300 p-3 hover:cursor-pointer rounded-xl ${
          disabled
            ? "bg-gray-200 cursor-not-allowed text-[#c7c7c7]"
            : "bg-white text-[#000008]"
        }`}
        onClick={(e) => handleOpenPanel(e)}
      >
        <div className="flex items-center justify-between">
          <span className="ml-2 texts-md text-[#434343]">
            {value ? (
              <>
                {value}
                {options.find((option) => option.value === value)
                  ?.percentage !== undefined &&
                  ` (${
                    options.find((option) => option.value === value)?.percentage
                  }%)`}
              </>
            ) : (
              `Select ${label}`
            )}
          </span>
          <ChevronDown
            className={`h-4 w-4 ${isOpen ? "transform rotate-180" : ""}`}
          />
        </div>
      </div>
      {isOpen && (
        <div className="drop-shadow-lg absolute z-10 mt-1 w-full p-2 bg-white rounded-lg border border-gray-300 shadow-md">
          {options.map((option) => (
            <div
              key={option.value}
              className={`px-4 py-2 relative cursor-pointer hover:bg-[#ef3d49] hover:text-white ${
                value === option.value ? "text-black font-bold" : ""
              }`}
              onClick={() => handleOptionClick(option.value)}
            >
              {value === option.value && (
                <TiTick className="absolute left-0 top-3 mr-2" />
              )}
              {option.value}
              {option.percentage !== undefined &&
                ` (${option.percentage}%)`}{" "}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CustomDropdown;













import React, { useState, useEffect } from "react";
import { Popup, useMap } from "react-map-gl";
import { IoIosCloseCircleOutline } from "react-icons/io";
import { useAppSelector } from "@/lib/store/hooks";

interface PopUpData {
  "18-24": number;
  "25-34": number;
  "35-49": number;
  "50": number;
  DayCount: number;
  F: number;
  High: number;
  M: number;
  Mid: number;
  Ultra_High: number;
  ZONE: string;
  building: string;
  details?: string;
  geohash: string;
  id: number;
  lat: number;
  lng: number;
  low: number;
  rank: number;
}

interface StatisticsData {
  "18-24": number;
  "25-34": number;
  "35-49": number;
  "50": number;
  DayCount: number;
  NightCount: number;
  F: number;
  High: number;
  M: number;
  Mid: number;
  Ultra_High: number;
  details: string;
  geohash: string;
  lat: number;
  lng: number;
  low: number;
  poi_count: number;
  region: string;
}

interface PopUpOnClickProps {
  mode: "Day" | "Night";
}

const PopUpOnClick: React.FC<PopUpOnClickProps> = ({ mode }) => {
  const [showPopup, setShowPopup] = useState<boolean>(false);
  const [popUpData, setPopUpData] = useState<Partial<PopUpData>>({});
  const selection = useAppSelector((state) => state?.mapdata?.selectedButton);
  const statistics: StatisticsData = useAppSelector(
    (state) => state.statistics.statistics
  );
  const { current: map } = useMap();

  useEffect(() => {
    if (!map) return;

    const handleMapClick = (e: any) => {
      map.getCanvas().style.cursor = "pointer";
      const coordinates = e?.lngLat;
      setShowPopup(true);
      setPopUpData({
        ...e?.features[0]?.properties,
        lat: coordinates.lat,
        lng: coordinates.lng,
      });
    };

    const layer = getLayer(mode, selection);
    if (layer) {
      map.on("click", layer, handleMapClick);
    }

    return () => {
      if (layer) {
        map.off("click", layer, handleMapClick);
      }
    };
  }, [map, mode, selection]);

  const getLayer = (mode: string, selection: string) => {
    if (mode === "Day" && selection === "Building") return "ada_day_buildings";
    if (mode === "Night" && selection === "Building") return "ada_night_buildings";
    if (mode === "Day" && selection === "Zone") return "ada-day-bounds";
    if (mode === "Night" && selection === "Zone") return "ada-night-bounds";
    return "";
  };

  const formatPercentage = (value?: number) => {
    return value !== undefined ? (value * 100).toFixed(2) + "%" : "N/A";
  };

  const formatDetails = (details?: string) => {
    if (!details) return "There is no POI in the building";

    try {
      const detailsObj = JSON.parse(details);

      if (Object.keys(detailsObj).length === 0) {
        return "There is no POI in the building";
      }

      const formattedDetails = Object.entries(detailsObj)
        .map(([key, value]) => `${key}: ${value}`)
        .join(",\n");

      const totalPOI = Object.values(detailsObj).reduce(
        (sum: number, value: any) => sum + value,
        0
      );

      return `${formattedDetails},\nTotal POI: ${totalPOI}`;
    } catch (error) {
      console.error("Error parsing details:", error);
      return "No POI in the building";
    }
  };

  const renderBuildingDetails = () => (
    <div className="bg-white p-2 absolute rounded-xl bottom-1 left-1">
      <div className="w-full relative">
        <IoIosCloseCircleOutline
          onClick={() => setShowPopup(false)}
          className="absolute right-0 top-0 text-xl hover:text-red-600"
        />
        {formatDetails(popUpData.details) && (
          <div className="flex flex-wrap justify-start w-40">
            <h1 className="font-bold mb-2 w-full">Building Details:</h1>
            <pre className="font-bold whitespace-pre-wrap">
              {formatDetails(popUpData.details)}
            </pre>
            <ul className="grid grid-cols-2 text-sm">
              <li className="font-bold">Rank:</li>
              <li className="ml-2">{popUpData.rank}</li>
            </ul>
          </div>
        )}
      </div>
    </div>
  );

  const renderZoneDetails = () => (
    <div className="bg-white p-2 absolute rounded-xl bottom-1 left-1">
      <div className="w-full relative">
        <IoIosCloseCircleOutline
          onClick={() => setShowPopup(false)}
          className="absolute right-0 top-0 text-xl hover:text-red-600"
        />
        <h1 className="font-bold mb-2 text-md">Age Group</h1>
        <ul className="grid grid-cols-2 text-sm">
          <li className="font-bold">18-24:</li>
          <li>{formatPercentage(statistics["18-24"])}</li>
          <li className="font-bold">25-34:</li>
          <li>{formatPercentage(statistics["25-34"])}</li>
          <li className="font-bold">35-49:</li>
          <li>{formatPercentage(statistics["35-49"])}</li>
          <li className="font-bold">50:</li>
          <li>{formatPercentage(statistics["50"])}</li>
        </ul>
        <h1 className="font-bold my-2 text-md">Region Details</h1>
        <ul className="grid grid-cols-2 text-sm">
          {statistics.DayCount > 0 && (
            <>
              <li className="font-bold">Day Count:</li>
              <li>{statistics.DayCount}</li>
            </>
          )}
          {statistics.NightCount > 0 && (
            <>
              <li className="font-bold">Night Count:</li>
              <li>{statistics.NightCount}</li>
            </>
          )}
          <li className="font-bold">Female:</li>
          <li>{formatPercentage(statistics.F)}</li>
          <li className="font-bold">Male:</li>
          <li>{formatPercentage(statistics.M)}</li>
        </ul>
        <h1 className="font-bold my-2 text-md">Affluance</h1>
        <ul className="grid grid-cols-2 text-sm">
          <li className="font-bold">Ulra-High</li>
          <li>{formatPercentage(statistics.Ultra_High)}</li>{" "}
          <li className="font-bold">High</li>
          <li>{formatPercentage(statistics.High)}</li>{" "}
          <li className="font-bold">Medium</li>
          <li>{formatPercentage(statistics.Mid)}</li>{" "}
          <li className="font-bold">Low</li>
          <li>{formatPercentage(statistics.low)}</li>
        </ul>
      </div>
    </div>
  );

  return (
    <div>
      {showPopup &&
        popUpData?.details &&
        selection === "Building" &&
        renderBuildingDetails()}
      {showPopup && statistics && selection === "Zone" && renderZoneDetails()}
    </div>
  );
};

export default PopUpOnClick;
